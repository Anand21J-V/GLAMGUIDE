import streamlit as st
import numpy as np
import pickle
import os
import tensorflow as tf
from PIL import Image

# Define the path to the model
working_dir = os.path.dirname(os.path.abspath(__file__))
model_path = f"{working_dir}/H_CLOSET_MODEL.h5"

# Load the pre-trained model
model = tf.keras.models.load_model(model_path)

# Define a function to preprocess images for prediction
def preprocess_image(image_path):
    img = Image.open(image_path).resize((160, 120))
    img_array = np.array(img)
    if img_array.shape[-1] == 4:  # Check if image has an alpha channel and remove it
        img_array = img_array[..., :3]
    img_array = np.expand_dims(img_array, axis=0)
    return img_array

# Function to decode the model's predictions
def decode_predictions(predictions, feature_labels):
    decoded_predictions = {}
    for i, feature in enumerate(feature_labels):
        predicted_class = np.argmax(predictions[i])
        confidence = predictions[i][predicted_class]
        decoded_predictions[feature] = (predicted_class, confidence)
    return decoded_predictions

# List of feature labels in the same order as the model outputs
feature_labels = ['season', 'gender', 'masterCategory', 'subCategory', 'articleType', 'baseColour', 'usage']

# Dictionary of class labels for each feature (should match your training setup)
class_labels = {
    'season': ['Fall', 'Summer', 'Winter'],
    'gender': ['Men', 'Women'],
    'masterCategory': ['Apparel', 'Accessories'],
    'subCategory': ['Topwear', 'Bottomwear', 'Watches'],
    'articleType': ['Shirts', 'Jeans', 'Watches', 'Track Pants', 'Tshirts'],
    'baseColour': ['Navy Blue', 'Blue', 'Silver', 'Black', 'Grey'],
    'usage': ['Casual']
}

# Streamlit app
st.title("Image Feature Prediction")

uploaded_file = st.file_uploader("Choose an image...", type="jpg")

if uploaded_file is not None:
    img = Image.open(uploaded_file).resize((160, 120))
    img_array = preprocess_image(uploaded_file)
    
    st.image(img, caption='Uploaded Image', use_column_width=True)
    st.write("")
    st.write("Classifying...")

    predictions = model.predict(img_array)
    decoded_predictions = decode_predictions(predictions, feature_labels)

    # Display the predictions
    for feature, (predicted_class, confidence) in decoded_predictions.items():
        st.write(f"{feature.capitalize()}: {class_labels[feature][predicted_class]} (Confidence: {confidence:.2f})")

    # Add a button to save the predictions
    if st.button("Save Predictions"):
        with open("predictions.pkl", "wb") as f:
            pickle.dump(decoded_predictions, f)
        st.write("Predictions saved successfully!")